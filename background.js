/**
 * background.js (Service Worker)
 * Handles background tasks for the Selenium Recorder extension.
 * - Manages recording state across main tab and popups within a WINDOW.
 * - Listens for messages from popup, content script, and side panel.
 * - Generates the Selenium script (handling CSS/XPath, JS click fallback, screenshots, pauses).
 * - Creates and downloads the ZIP archive.
 * *** Side panel is opened globally for the window. ***
 * *** Allows recording to continue across same-tab navigations/reloads. ***
 * *** Handles cancellation, delete, and pause requests from side panel. ***
 * *** Detects popups/new tabs AND manual tab activations within the recorded window. ***
 * *** Captures screenshot along with HTML source. ***
 */

// --- Load required scripts ---
try {
    importScripts('jszip.min.js');
    console.log("Background: JSZip library loaded successfully via importScripts.");
} catch (e) {
    console.error("Background: CRITICAL ERROR - Failed to load JSZip library.", e);
}


// --- State Variables ---
let isRecording = false;
let recordedActions = [];
// let capturedHTMLs = []; // Replaced by captureData
let captureData = []; // Array to store {html: string, screenshotDataUrl: string, timestamp: number} objects
let startURL = '';
let recordingTabId = null; // Tab currently being interacted with
let recordedWindowId = null; // Window where recording is active
let injectedTabs = new Set(); // Keep track of tabs with content script injected

// --- Helper Functions ---
// generateSeleniumScript, repr remain the same...

/**
 * Generates the Python Selenium script content.
 * - Handles CSS and XPath selectors.
 * - Adds JS click fallback.
 * - Adds screenshot command after each step.
 * - Adds time.sleep() for Pause actions.
 * - Uses 3-second pause between other steps.
 * - Ignores HTML_Capture and Switch_Tab actions.
 * @returns {string} The generated Python script.
 */
function generateSeleniumScript() {
    let scriptLines = [
        `# Generated by Selenium Recorder Chrome Extension`,
        `# WARNING: This script executes actions sequentially starting from the initial URL.`,
        `# It does not automatically handle page navigations or window/tab switching.`,
        `# Selectors might be CSS or Absolute XPath (if CSS failed). XPath is brittle.`,
        `import time`,
        `import os`,
        `from selenium import webdriver`,
        `from selenium.webdriver.common.by import By`,
        `from selenium.webdriver.support.ui import Select`,
        `from selenium.webdriver.support.ui import WebDriverWait`,
        `from selenium.webdriver.support import expected_conditions as EC`,
        `from selenium.common.exceptions import NoSuchElementException, TimeoutException, ElementClickInterceptedException`,
        ``,
        `# --- Screenshot Setup ---`,
        `SCREENSHOT_DIR = "selenium_screenshots"`,
        `if not os.path.exists(SCREENSHOT_DIR):`,
        `    os.makedirs(SCREENSHOT_DIR)`,
        ``,
        `# --- WebDriver Setup ---`,
        `driver = webdriver.Chrome()`,
        `driver.maximize_window()`,
        `wait = WebDriverWait(driver, 10)`,
        `# Store the main window handle (optional, useful for manual switching)`,
        `# main_window_handle = driver.current_window_handle`,
        ``,
        `try:`,
        `    # 1. Navigate to Start URL`,
        `    print(f'Navigating to initial URL: ${startURL}')`,
        `    driver.get('${startURL}')`,
        "    time.sleep(3)",
        `    screenshot_path = os.path.join(SCREENSHOT_DIR, f'screenshot_step_1_navigated.png')`,
        `    driver.save_screenshot(screenshot_path)`,
        `    print(f'  Screenshot saved: {screenshot_path}')`,
        ``
    ];

    let scriptStepCounter = 2;

    // Filter out non-scriptable actions
    const scriptableActions = recordedActions.filter(action =>
        action.type !== 'HTML_Capture' && action.type !== 'Switch_Tab'
    );

    scriptableActions.forEach((action, index) => {
        // Define Python variable for current step
        scriptLines.push(`    current_script_step = ${scriptStepCounter}`);

        // Handle Pause action
        if (action.type === 'Pause') {
            scriptLines.push(`    # Step ${scriptStepCounter}: Pause`);
            scriptLines.push(`    duration = ${action.duration || 1}`); // Default to 1s if duration missing
            scriptLines.push(`    print(f'Step {current_script_step}: Pausing for {duration} second(s)...')`);
            scriptLines.push(`    time.sleep(duration)`);
            scriptLines.push(`    screenshot_path = os.path.join(SCREENSHOT_DIR, f'screenshot_step_{current_script_step}_after_pause.png')`);
            scriptLines.push(`    driver.save_screenshot(screenshot_path)`);
            scriptLines.push(`    print(f'  Screenshot saved: {screenshot_path}')`);
        }
        // Handle other scriptable actions (Click, Input, Select)
        else {
            let selector = action.selector;
            let byTypeString = action.selectorType === 'XPath' ? 'By.XPATH' :
                             selector.startsWith('#') ? 'By.ID' :
                             selector.includes('[name="') ? 'By.CSS_SELECTOR' :
                             selector.startsWith('.') ? 'By.CSS_SELECTOR' :
                             selector.match(/^[a-zA-Z]+$/) ? 'By.TAG_NAME' :
                             'By.CSS_SELECTOR';

            let selectorValue = action.selectorType === 'XPath' ? selector.substring(6) :
                                byTypeString === 'By.ID' ? selector.substring(1) :
                                selector;

            scriptLines.push(`    # Step ${scriptStepCounter}: ${action.type} on element with ${action.selectorType || 'CSS'} selector '${selector}'`);

            // Assign Python variables for selector and type
            scriptLines.push(`    py_selector_value = ${repr(selectorValue)}`);
            scriptLines.push(`    py_by_type = ${byTypeString}`);

            // Add wait and action block
            scriptLines.push(`    print(f'Step {current_script_step}: Waiting for element ({py_by_type}, {py_selector_value})')`);
            scriptLines.push(`    try:`);
            scriptLines.push(`        element = wait.until(EC.presence_of_element_located((py_by_type, py_selector_value)))`);
            if (action.type === 'Click' || action.type === 'Select') {
                 scriptLines.push(`        element = wait.until(EC.element_to_be_clickable((py_by_type, py_selector_value)))`);
            }
            scriptLines.push(`        print(f'Step {current_script_step}: Found element. Performing action: ${action.type}')`);

            switch (action.type) {
                case 'Click':
                    scriptLines.push(`        try:`);
                    scriptLines.push(`            element.click()`);
                    scriptLines.push(`        except ElementClickInterceptedException:`);
                    scriptLines.push(`            print("  WARN: Element click intercepted, attempting JavaScript click.")`);
                    scriptLines.push(`            driver.execute_script("arguments[0].click();", element)`);
                    break;
                case 'Input':
                    scriptLines.push(`        py_input_value = ${repr(action.value)}`);
                    scriptLines.push(`        element.clear() # Optional: Clear field before typing`);
                    scriptLines.push(`        element.send_keys(py_input_value)`);
                    break;
                case 'Select':
                    scriptLines.push(`        py_select_value = ${repr(action.value)}`);
                    scriptLines.push(`        select = Select(element)`);
                    scriptLines.push(`        select.select_by_value(py_select_value) # Assumes selection by value`);
                    break;
            }
            // Add Screenshot Command after action
            scriptLines.push(`        screenshot_path = os.path.join(SCREENSHOT_DIR, f'screenshot_step_{current_script_step}_after_action.png')`);
            scriptLines.push(`        driver.save_screenshot(screenshot_path)`);
            scriptLines.push(`        print(f'  Screenshot saved: {screenshot_path}')`);

            scriptLines.push(`    except TimeoutException:`);
            scriptLines.push(`        print(f'Error in Step {current_script_step}: Element not found or timed out. Selector: ({py_by_type}, {py_selector_value})')`);
            scriptLines.push(`        screenshot_path = os.path.join(SCREENSHOT_DIR, f'screenshot_step_{current_script_step}_error_timeout.png')`);
            scriptLines.push(`        driver.save_screenshot(screenshot_path)`);
            scriptLines.push(`        print(f'  Error screenshot saved: {screenshot_path}')`);
            scriptLines.push(`        raise # Re-raise the exception to stop the script`);
            scriptLines.push(``); // End of outer try block
        } // End else block for non-Pause actions

        scriptLines.push("    time.sleep(3) # Pause between steps");
        scriptLines.push(``);
        scriptStepCounter++; // Increment script step counter
    });

    scriptLines.push(`    print('Script finished successfully!')`)
    scriptLines.push(``)
    scriptLines.push(`except Exception as e:`)
    scriptLines.push(`    print(f'An unexpected error occurred outside specific steps: Type={type(e).__name__}, Message={str(e)}')`)
    scriptLines.push(`    # Screenshot on unexpected error`)
    scriptLines.push(`    try:`)
    scriptLines.push(`        screenshot_path = os.path.join(SCREENSHOT_DIR, f'screenshot_unexpected_error.png')`)
    scriptLines.push(`        driver.save_screenshot(screenshot_path)`)
    scriptLines.push(`        print(f'  Error screenshot saved: {screenshot_path}')`)
    scriptLines.push(`    except Exception as screen_err:`)
    scriptLines.push(`        print(f"  Could not save error screenshot: {str(screen_err)}")`)
    scriptLines.push(``)
    scriptLines.push(`finally:`)
    scriptLines.push(`    # --- Cleanup ---`)
    scriptLines.push(`    print('Closing WebDriver.')`)
    scriptLines.push(`    driver.quit()`)
    scriptLines.push(``)

    return scriptLines.join('\n');
}

/**
 * Helper function to mimic Python's repr() for safely embedding strings in the generated script.
 * @param {*} value - The value to represent.
 * @returns {string} A string representation suitable for embedding in Python code.
 */
function repr(value) {
    return JSON.stringify(String(value));
}


/**
 * Resets the recording state. Does NOT disable the side panel.
 */
function resetRecordingState() {
    isRecording = false;
    recordedActions = [];
    // capturedHTMLs = []; // Replaced
    captureData = []; // Clear combined capture data
    startURL = '';
    recordingTabId = null;
    recordedWindowId = null;
    injectedTabs.clear();
    console.log("Background: Recording state reset.");

    // Update side panel UI if it's still open
    chrome.runtime.sendMessage({ command: "update_ui", data: { actions: [], isRecording: false, htmlCount: 0 } }) // Send htmlCount as 0
        .catch(e => console.log("Background: Side panel likely closed during reset (expected)."));
}

/**
 * Injects the content script into a given tab if not already injected.
 * @param {number} tabId - The ID of the tab to inject into.
 */
async function ensureContentScriptInjected(tabId) {
    if (!tabId || injectedTabs.has(tabId)) {
        return;
    }
    console.log(`Background: Attempting to inject content script into tab ${tabId}`);
    try {
        const tab = await chrome.tabs.get(tabId);
        if (!tab || tab.url?.startsWith('chrome://') || tab.url?.startsWith('about:')) {
            console.warn(`Background: Cannot inject script into inaccessible tab ${tabId} (URL: ${tab?.url})`);
            return;
        }

        await chrome.scripting.executeScript({
            target: { tabId: tabId },
            files: ['content.js']
        });
        console.log(`Background: Content script injected successfully into tab ${tabId}.`);
        injectedTabs.add(tabId);
    } catch (err) {
        console.error(`Background: Failed to inject content script into tab ${tabId}:`, err);
    }
}


// --- Event Listeners ---

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    console.log("Background received message:", message.command, "from", sender.tab ? `tab ${sender.tab.id} in window ${sender.tab.windowId}` : "extension");

    switch (message.command) {
        case "start_recording":
            if (isRecording) {
                console.warn("Background: Recording already in progress.");
                sendResponse({ success: false, message: "Recording already active." });
                return true;
            }

            const { tabId, windowId, url } = message.data || {};
            if (!tabId || !windowId || !url) {
                 console.error("Background: Missing tabId, windowId, or url in start_recording message.");
                 sendResponse({ success: false, message: "Missing data from popup." });
                 return true;
            }

            resetRecordingState(); // Ensure clean state

            recordingTabId = tabId;
            recordedWindowId = windowId;
            startURL = url;
            isRecording = true;

            console.log(`Background: Starting recording state for tab ${recordingTabId} in window ${recordedWindowId} with URL: ${startURL}`);

            ensureContentScriptInjected(recordingTabId)
                .then(() => new Promise(resolve => setTimeout(resolve, 250)))
                .then(() => {
                    console.log("Background: Sending initial UI update to side panel.");
                    return chrome.runtime.sendMessage({
                        command: "update_ui",
                        data: { actions: recordedActions, isRecording: true, startUrl: startURL, htmlCount: captureData.length } // Use captureData length
                    });
                })
                .then(() => {
                    console.log("Background: Initial UI update sent successfully.");
                    sendResponse({ success: true });
                })
                .catch(error => {
                    console.error("Background: Error during recording start sequence:", error);
                    resetRecordingState();
                    sendResponse({ success: false, message: `Failed to start recording logic: ${error.message}` });
                });

            return true;

        case "record_action":
            if (!isRecording || !recordingTabId || !sender.tab || sender.tab.id !== recordingTabId || sender.tab.windowId !== recordedWindowId) {
                console.warn(`Background: Ignoring action from non-recorded tab/window. Expected: T${recordingTabId}/W${recordedWindowId}, Got: T${sender.tab?.id}/W${sender.tab?.windowId}`);
                return true;
            }
            const action = message.data;
            action.step = recordedActions.length + 1;

            if (action.selector && action.selector.startsWith('xpath=')) {
                action.selectorType = 'XPath';
            } else {
                action.selectorType = 'CSS';
            }

            if (!action.selector) {
                 action.selector = "SELECTOR_MISSING";
                 action.selectorType = 'N/A';
            }
            delete action.elementInfo;

            console.log("Background: Recording action:", action);
            recordedActions.push(action);

            chrome.runtime.sendMessage({ command: "update_ui", data: { actions: recordedActions, isRecording: true, htmlCount: captureData.length } }) // Use captureData length
                .catch(e => console.warn("Background: Side panel not available for action update:", e));

            sendResponse({ success: true });
            return true;

        case "capture_html":
             if (!isRecording || !recordingTabId) {
                sendResponse({ success: false, message: "Not recording." });
                return true;
             }
             const currentCaptureTimestamp = Date.now(); // Timestamp for this capture event

             // 1. Get HTML from content script
             chrome.tabs.sendMessage(recordingTabId, { command: "get_html" }, (htmlResponse) => {
                 if (chrome.runtime.lastError || !htmlResponse || !htmlResponse.success || typeof htmlResponse.html !== 'string') {
                     console.error(`Background: Error requesting HTML from tab ${recordingTabId}:`, chrome.runtime.lastError?.message || "Invalid response");
                     sendResponse({ success: false, message: chrome.runtime.lastError?.message || "Failed to get HTML." });
                     return;
                 }

                 const capturedHtmlContent = htmlResponse.html;
                 console.log(`Background: HTML received from tab ${recordingTabId}. Size: ${capturedHtmlContent.length}`);

                 // 2. Capture Screenshot
                 chrome.tabs.captureVisibleTab(recordedWindowId, { format: "png" }, (screenshotDataUrl) => {
                     if (chrome.runtime.lastError || !screenshotDataUrl) {
                         console.error(`Background: Error capturing screenshot for tab ${recordingTabId}:`, chrome.runtime.lastError?.message || "No data URL returned");
                         // Proceed without screenshot? Or fail? Let's proceed without for now.
                         screenshotDataUrl = null; // Mark as failed
                     } else {
                         console.log(`Background: Screenshot captured for tab ${recordingTabId}.`);
                     }

                     // 3. Store HTML and Screenshot Data
                     captureData.push({
                         html: capturedHtmlContent,
                         screenshotDataUrl: screenshotDataUrl, // Store data URL (or null if failed)
                         timestamp: currentCaptureTimestamp // Store timestamp for potential linking/deletion
                     });

                     // 4. Record the HTML_Capture action
                     const captureAction = {
                         type: 'HTML_Capture',
                         step: recordedActions.length + 1,
                         timestamp: currentCaptureTimestamp, // Add timestamp to action
                         selectorType: 'N/A'
                     };
                     recordedActions.push(captureAction);
                     console.log("Background: Recording action:", captureAction);

                     // 5. Update Side Panel
                     chrome.runtime.sendMessage({
                         command: "update_ui",
                         data: {
                             actions: recordedActions,
                             htmlCount: captureData.length, // Use length of captureData array
                             isRecording: true
                         }
                      })
                         .catch(e => console.warn("Background: Side panel not available for HTML count update:", e));

                     sendResponse({ success: true, count: captureData.length });
                 });
             }).catch(error => {
                  console.error(`Background: Error sending get_html message to tab ${recordingTabId}:`, error);
                  sendResponse({ success: false, message: `Error contacting tab: ${error.message}` });
             });
             return true; // Indicate async response

        case "delete_action":
             if (!isRecording) {
                sendResponse({ success: false, message: "Not recording." });
                return true;
             }
             const stepToDelete = message.data?.step;
             if (typeof stepToDelete !== 'number') {
                 console.error("Background: Invalid step number received for deletion.");
                 sendResponse({ success: false, message: "Invalid step number." });
                 return true;
             }

             console.log(`Background: Attempting to delete action at step ${stepToDelete}`);
             const indexToDelete = recordedActions.findIndex(action => action.step === stepToDelete);

             if (indexToDelete === -1) {
                 console.warn(`Background: Action with step ${stepToDelete} not found.`);
                 sendResponse({ success: false, message: "Step not found." });
                 return true;
             }

             const deletedAction = recordedActions.splice(indexToDelete, 1)[0];
             console.log("Background: Deleted action:", deletedAction);

             // If the deleted action was an HTML capture, also remove the corresponding capture data object
             if (deletedAction.type === 'HTML_Capture' && deletedAction.timestamp) {
                 const captureDataIndex = captureData.findIndex(data => data.timestamp === deletedAction.timestamp);
                 if (captureDataIndex !== -1) {
                     console.log(`Background: Removing associated HTML/Screenshot capture data at index ${captureDataIndex}`);
                     captureData.splice(captureDataIndex, 1);
                 } else {
                     console.warn(`Background: Could not find matching capture data for deleted action timestamp ${deletedAction.timestamp}`);
                 }
             }

             // Re-number subsequent steps
             for (let i = indexToDelete; i < recordedActions.length; i++) {
                 recordedActions[i].step = i + 1;
             }
             console.log("Background: Renumbered subsequent steps.");

             chrome.runtime.sendMessage({
                 command: "update_ui",
                 data: {
                     actions: recordedActions,
                     htmlCount: captureData.length, // Use captureData length
                     isRecording: true
                 }
              })
                 .catch(e => console.warn("Background: Side panel not available for delete update:", e));

             sendResponse({ success: true });
             return true;

        case "add_pause":
            if (!isRecording) {
                sendResponse({ success: false, message: "Not recording." });
                return true;
            }
            const duration = message.data?.duration;
            if (typeof duration !== 'number' || duration <= 0) {
                 console.error("Background: Invalid pause duration received.");
                 sendResponse({ success: false, message: "Invalid duration." });
                 return true;
            }

            const pauseAction = {
                type: 'Pause',
                duration: duration,
                step: recordedActions.length + 1,
                timestamp: Date.now(),
                selectorType: 'N/A'
            };
            console.log("Background: Recording action:", pauseAction);
            recordedActions.push(pauseAction);

            chrome.runtime.sendMessage({
                command: "update_ui",
                data: {
                    actions: recordedActions,
                    htmlCount: captureData.length, // Use captureData length
                    isRecording: true
                }
             })
                .catch(e => console.warn("Background: Side panel not available for pause update:", e));

            sendResponse({ success: true });
            return true;


        case "save_export":
            if (!isRecording) {
                sendResponse({ success: false, message: "Not recording." });
                return true;
            }
            console.log("Background: Save and Export triggered.");

            if (typeof JSZip === 'undefined') {
                 console.error("Background: JSZip is not defined. Export failed.");
                 sendResponse({ success: false, message: "JSZip library error (not loaded)." });
                 return true;
            }

            const seleniumScript = generateSeleniumScript();
            console.log("Background: Selenium script generated.");

            try {
                const zip = new JSZip();
                zip.file("selenium_script.py", seleniumScript);

                console.log(`Background: Preparing to zip ${captureData.length} HTML/Screenshot pairs.`);

                // *** Iterate through captureData to add HTML and Screenshots ***
                captureData.forEach((data, index) => {
                    const baseFilename = `capture_${index + 1}`;

                    // Add HTML file
                    const htmlFilename = `${baseFilename}.html`;
                    if (typeof data.html === 'string') {
                        console.log(`Background: Adding file to zip: ${htmlFilename}`);
                        zip.file(htmlFilename, data.html);
                    } else {
                        console.warn(`Background: Skipping invalid HTML data at index ${index}`);
                    }

                    // Add Screenshot file (if available)
                    const pngFilename = `${baseFilename}.png`;
                    if (data.screenshotDataUrl && data.screenshotDataUrl.startsWith('data:image/png;base64,')) {
                        // Extract base64 data part
                        const base64Data = data.screenshotDataUrl.substring('data:image/png;base64,'.length);
                        console.log(`Background: Adding file to zip: ${pngFilename}`);
                        // Add as base64 data
                        zip.file(pngFilename, base64Data, { base64: true });
                    } else {
                         console.warn(`Background: Skipping invalid or missing screenshot data at index ${index}`);
                    }
                });

                console.log("Background: Generating ZIP blob...");
                zip.generateAsync({ type: "blob" })
                    .then(content => {
                        console.log(`Background: ZIP blob generated (size: ${content.size}). Converting to data URL...`);
                        const reader = new FileReader();
                        reader.onload = function() {
                            const dataUrl = reader.result;
                            const zipFilename = "selenium_recording.zip";
                            console.log(`Background: Blob converted to data URL. Initiating download...`);

                            chrome.downloads.download({
                                url: dataUrl,
                                filename: zipFilename,
                                saveAs: true
                            }).then(downloadId => {
                                 if (downloadId) {
                                     console.log("Background: Download started with ID:", downloadId);
                                     sendResponse({ success: true });
                                     resetRecordingState(); // Reset state, panel stays open
                                 } else {
                                     console.error("Background: Download failed to initiate.");
                                     sendResponse({ success: false, message: "Download failed to initiate." });
                                     resetRecordingState();
                                 }
                            }).catch(err => {
                                 console.error("Background: Download failed:", err);
                                 sendResponse({ success: false, message: `Download failed: ${err.message}` });
                                 resetRecordingState();
                            });
                        };
                        reader.onerror = function() {
                            console.error("Background: FileReader failed to read blob.");
                            sendResponse({ success: false, message: "Failed to read generated ZIP data." });
                            resetRecordingState();
                        };
                        reader.readAsDataURL(content);
                    })
                    .catch(err => {
                        console.error("Background: Error generating ZIP blob:", err);
                        sendResponse({ success: false, message: `ZIP generation failed: ${err.message}` });
                        resetRecordingState();
                    });

            } catch (e) {
                console.error("Background: Error during ZIP creation/processing:", e);
                sendResponse({ success: false, message: `JSZip library error: ${e.message}` });
                resetRecordingState();
            }
            return true;

        case "cancel_recording":
            if (!isRecording) {
                sendResponse({ success: false, message: "Not recording." });
                return true;
            }
            console.log("Background: Cancel recording request received.");
            resetRecordingState();
            sendResponse({ success: true });
            return true;


        case "get_status":
            sendResponse({ isRecording: isRecording, recordingWindowId: recordedWindowId });
            return true;

        case "request_current_state":
             if (isRecording && sender.contextType === "SIDE_PANEL") {
                 console.log("Background: Side panel requested current state.");
                 sendResponse({
                     actions: recordedActions,
                     htmlCount: captureData.length, // Use captureData length
                     isRecording: true,
                     startUrl: startURL
                 });
             } else {
                 sendResponse(null);
             }
             return true;


        case "stop_recording_internal":
            if (isRecording && sender.contextType === "SIDE_PANEL") {
                 console.log("Background: Side panel context destroyed, stopping recording.");
                 resetRecordingState();
                 sendResponse({success: true});
            }
             else {
                 sendResponse({success: false, message: "Not recording or invalid context"});
             }
            return true;


        default:
             console.log("Background: Unhandled command:", message.command);
             sendResponse({ success: false, message: "Unknown command" });
             return false;
    }
});

// Tab listeners
chrome.tabs.onRemoved.addListener((tabId, removeInfo) => {
    if (isRecording && tabId === recordingTabId) {
        console.log(`Background: Recorded tab (${tabId}) was closed. Stopping recording.`);
        resetRecordingState();
    }
    if (isRecording && removeInfo.windowId === recordedWindowId && removeInfo.isWindowClosing) {
        console.log(`Background: Recorded window (${recordedWindowId}) closed. Stopping recording.`);
        resetRecordingState();
    }
});

chrome.tabs.onActivated.addListener(async (activeInfo) => {
    if (isRecording && recordedWindowId && activeInfo.windowId === recordedWindowId) {
        const newTabId = activeInfo.tabId;
        if (newTabId !== recordingTabId) {
            console.log(`Background: Tab activated: ${newTabId} in recorded window ${recordedWindowId}. Switching target.`);

             const switchAction = {
                type: 'Switch_Tab',
                tabId: newTabId,
                step: recordedActions.length + 1,
                timestamp: Date.now(),
                selectorType: 'N/A'
            };
            recordedActions.push(switchAction);
            console.log("Background: Recording action:", switchAction);

            recordingTabId = newTabId;
            await ensureContentScriptInjected(newTabId);

            chrome.runtime.sendMessage({
                command: "update_ui",
                data: {
                    actions: recordedActions,
                    isRecording: true,
                    htmlCount: captureData.length, // Use captureData length
                }
             })
                .catch(e => console.warn("Background: Side panel not available for tab activation update:", e));
        }
    }
});


chrome.tabs.onCreated.addListener((tab) => {
    if (isRecording && tab.openerTabId === recordingTabId && tab.windowId === recordedWindowId && tab.id) {
        const newTabId = tab.id;
        console.log(`Background: New tab (${newTabId}) opened by recorded tab (${recordingTabId}) in same window. URL: ${tab.pendingUrl || tab.url}`);

        const switchAction = {
            type: 'Switch_Tab',
            tabId: newTabId,
            url: tab.pendingUrl || tab.url,
            step: recordedActions.length + 1,
            timestamp: Date.now(),
            selectorType: 'N/A'
        };
        recordedActions.push(switchAction);
        console.log("Background: Recording action:", switchAction);

        console.log(`Background: Switching recording target from tab ${recordingTabId} to ${newTabId}`);
        recordingTabId = newTabId;

        const listener = function(updatedTabId, changeInfo, updatedTab) {
            if (updatedTabId === newTabId && changeInfo.status === 'complete') {
                chrome.tabs.onUpdated.removeListener(listener);

                if (!isRecording || recordingTabId !== newTabId) {
                     console.log(`Background: Recording stopped/changed before tab ${newTabId} finished. Skipping injection.`);
                     return;
                }
                ensureContentScriptInjected(newTabId);
            }
        };
        chrome.tabs.onUpdated.addListener(listener);

        chrome.runtime.sendMessage({
            command: "update_ui",
            data: {
                actions: recordedActions,
                isRecording: true,
                htmlCount: captureData.length, // Use captureData length
            }
         })
            .catch(e => console.warn("Background: Side panel not available for tab switch update:", e));

    }
});


chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
    if (isRecording && tabId === recordingTabId) {
        if (changeInfo.url) {
             console.log(`Background: Recorded tab (${tabId}) navigated to ${changeInfo.url}. Recording continues.`);
        }
        if (changeInfo.status === 'loading') {
             console.log(`Background: Recorded tab (${tabId}) status changed to loading. Recording continues.`);
        }
    }
});


console.log("Background service worker started.");
